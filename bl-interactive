#!/bin/bash
#
# Bash library and executable that helps managing interactive choices
#
# Copyright © 2021 Jean-Jacques Brucker <jjbrucker@free.fr>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License version 3
#    as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# shellcheck disable=SC2013 # To read lines rather than words
# shellcheck disable=SC2046 # Quote this to prevent word splitting
# shellcheck disable=SC2086 # Double quote warning
# shellcheck disable=SC2128 # expanding array without index warning
# shellcheck disable=SC2162 # Read without -r


if [[ "$1" == --bash-completion ]] ; then
	BL_tmp_a="$("$BASH_SOURCE" --help | sed -n 's,^   \([a-z_-]\+\>\).*,\1,p' )"
	BL_tmp_o=$(for a in $BL_tmp_a ; do
		echo "[$a]=\"$(eval echo $("$BASH_SOURCE" $a --help | sed -n 's,^  ... \(--[a-z_-]\+[^ ]*\).*,\1,p' | sed 's_<_{_ ; s_|_,_g ; s_>_}_ '))\""
	done)

	eval '_bl_interactive_completion()
	{
		local cur coptions="--help --version"
		local a actions="'$BL_tmp_a'"
		local -A aoptions=('$BL_tmp_o')

		COMPREPLY=()
		cur=${COMP_WORDS[COMP_CWORD]}

		case ${COMP_WORDS[COMP_CWORD-1]} in
			--help|--version)
				# should exit without executing any actions, so do not complete anything
				return 0 ;;
			--text)
				return 0 ;;
			--frontend)
				COMPREPLY=( $(compgen -W "whiptail dialog NONE" -- $cur ) )
				return 0 ;;
		esac
		case $cur in
			-*)
				if a=$(grep -o "\<\('${BL_tmp_a//$'\n'/\\|}'\)\>" <<< "${COMP_WORDS[@]}") ; then
					COMPREPLY=( $(compgen -W "$coptions ${aoptions[$a]}" -- $cur ) )
					return 0
				fi
				COMPREPLY=( $(compgen -W "$coptions --frontend" -- $cur ) )
				return 0 ;;
		esac
		# complete actions if none in ${COMP_WORDS[@]}
		grep -q "\<\('${BL_tmp_a//$'\n'/\\|}'\)\>" <<< "${COMP_WORDS[@]}" || COMPREPLY=( $(compgen -W "$actions" -- $cur ) )
		return 0
	}'
	unset BL_tmp_a BL_tmp_o
	complete -F _bl_interactive_completion "$(basename "$BASH_SOURCE")" "$BASH_SOURCE"
	return 0
fi

# If sourcing while _bl_interactive_parseoptions is already set, execute the function and return without reloading rest of file.
if [[ "$BASH_SOURCE" != "$0" ]] && [[ "$(type -t _bl_interactive_parseoptions)" == function ]] ; then
	_bl_interactive_parseoptions "$@"
	return $?
fi


### Constants ###

BL_INTERACTIVE_NAME="$(basename "$(readlink -f "$BASH_SOURCE")" )"
declare -r BL_INTERACTIVE_NAME
declare -r BL_INTERACTIVE_VERSION="0.0.1"
declare -r BL_INTERACTIVE_FUNCTIONS=( $(sed -n 's,^\(bl_[^( ]*\) *().*,\1,p' "$BASH_SOURCE") )

### Default option values ###

: "${BL_INTERACTIVE_FRONTEND:=NONE}"

### functions ###

_bl_interactive_parseoptions() {
	local npp=$#
	for ((;$#;)) ; do
		case "$1" in
			-f|--frontend) shift ; BL_INTERACTIVE_FRONTEND="$1" ;; # WARNING: dialog use to be compatible with whiptail, but it's very buggy.
			-h|--help) printf "%s\n%s\n%s\n" "$BL_INTERACTIVE_usage" "$BL_INTERACTIVE_chelpmsg" "$BL_INTERACTIVE_shelpmsg" ; return 2 ;;
			-V|--version) printf "%s %s\n" "$BL_INTERACTIVE_NAME" "$BL_INTERACTIVE_VERSION" ; return 2 ;;
			--) shift ; break ;;
			-*) printf "%s: unrecognized option '%s'\n\nTry '%s --help' for more information.\n" "$BL_INTERACTIVE_NAME" "$1" "$BASH_SOURCE" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	BL_INTERACTIVE_NOPTIONS=$((npp-$#))
}

# using ( subshell ) for factorization : all new variables are "local" and {fd} is automatically close >&- while carrying return value
_bl_interactive_frontend() (
	unset last mtext rtext
	for ((;$#;)) ; do
		case "$1" in
			--mtext) shift ; mtext="$1" ;;
			--rtext) shift ; rtext="$1" ;;
			--last) shift ; last+=("$1") ;;
			--) shift ; break ;;
			-*) printf "%s: unrecognized option '%s'\n" "$FUNCNAME" "$1" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	# because whiptail don't scroll to the end when its text is very big. Duplicate the main text at its begining.
	# Note: we could use LINES and COLUMNS instead of an arbitrary strlen value, but there are not enough reliable.
	((${#rtext}<512)) || rtext="  $mtext"$'\n\n'"$rtext"
	if [[ ${#last[@]} -gt 0 ]] ; then
		$BL_INTERACTIVE_FRONTEND "$@" "$rtext"$'\n\n'"  $mtext" 0 $((COLUMNS/2)) "${last[@]}" {fd}>&1 1>&2 2>&${fd}
		exit $?
	else
		$BL_INTERACTIVE_FRONTEND "$@" "$rtext"$'\n\n'"  $mtext" 0 $((COLUMNS/2)) {fd}>&1 1>&2 2>&${fd}
		exit $?
	fi
)

_bl_interactive_indexof() {
	for ((;$#;)) ; do
		case "$1" in
			--) shift ; break ;;
			-*) printf "Usage: %s [--] VALUE ARRAY...\n" "$FUNCNAME" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	local asize value=$1
	shift
	asize=$#
	((asize)) || { printf "Usage: %s [--] VALUE ARRAY...\n" "$FUNCNAME" >&2 ; return 2 ;}
	while (($#)) ; do
		[[ "$1" != "${value}" ]] || break
		shift
	done
	(($#)) || return 1
	echo $((asize-$#))
}

bl_msgstop() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] MESSAGE"
	local helpmsg="
Display a message and wait for user to press [Enter]

Options:
  -t, --text TEXT          Text to display related to the message
"
	local pr
	for ((;$#;)) ; do
		case "$1" in
			-t|--text) shift ; pr="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "%s: Error: unrecognized option '%s'\nTry '%s --help' for more information.\n" "$FUNCNAME" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done

	local message="$*"
	if [[ "$BL_INTERACTIVE_FRONTEND" =~ ^(whiptail|dialog)$ ]] ; then
		_bl_interactive_frontend --rtext "$pr" --mtext "$message" -- --msgbox
		return $?
	fi

	local rep
	message=$'\e[1m'"$message"$'\e[0m'
	echo "$pr" >&2
	read -p "  $message"$' \e[2m(press Enter to continue)\e[0m ' rep
}

bl_toto() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] MESSAGE"
	local helpmsg="
Dummy function who output the MESSAGE

Options:
  -a, --ajoute TEXT          Text to display related to the message
"
	local pr
	for ((;$#;)) ; do
		case "$1" in
			-a|--ajoute) shift ; set "$1" "$@" "$1";;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "%s: Error: unrecognized option '%s'\nTry '%s --help' for more information.\n" "$FUNCNAME" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	echo "$@"
}


bl_input() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] QUESTION"
	local helpmsg="
Helper to ask for a string

Options:
  -d, --default STRING     Default initialized string
  -t, --text TEXT          Text to display related to the question
"
	local def pr
	for ((;$#;)) ; do
		case "$1" in
			-d|--default) shift ; def="$1" ;;
			-p|--preamble|-t|--text) shift ; pr="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "%s: Error: unrecognized option '%s'\nTry '%s --help' for more information.\n" "$FUNCNAME" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done

	local question="$*"
	if [[ "$BL_INTERACTIVE_FRONTEND" =~ ^(whiptail|dialog)$ ]] ; then
		_bl_interactive_frontend --rtext "$pr" --mtext "$question ?" --last "$def" -- --nocancel --inputbox
		return $?
	fi

	local rep
	question=$'\e[1m'"$question"$'\e[0m'
	[[ -z "$def" ]] || question+=" [$def]"
	echo "$pr" >&2
	read -p "  $question"$' \e[1m?\e[0m ' rep
	echo ${rep:-${def}}
}


bl_yesno() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] QUESTION"
	local helpmsg="
Helper for a yes/no question (binary choice)
If REPLY == 'yes', return 0
If REPLY == 'no', return 1
Else loop asking the question.

Options:
      --default=<yes|no>   Set a default answer
  -t, --text TEXT          Text to display related to the question
"
	local def pr
	for ((;$#;)) ; do
		case "$1" in
			--default=yes) def="yes" ;;
			--default=no) def="no" ;;
			-p|--preamble|-t|--text) shift ; pr="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "%s: Error: unrecognized option '%s'\nTry '%s --help' for more information.\n" "$FUNCNAME" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done

	local question="$*"

	if [[ "$BL_INTERACTIVE_FRONTEND" =~ ^(whiptail|dialog)$ ]] ; then
		if [[ "$def" == no ]] ; then
			def="--defaultno"
		else
			unset def
		fi
		_bl_interactive_frontend --rtext "$pr" --mtext "$question ?" -- $def --yesno
		return $?
	fi

	local rep
	question=$'\e[1m'"$question"$'\e[0m \e[2m(y/n)\e[0m'
	[[ -z "$def" ]] || question+=" [$def]"

	while true ; do
		echo "$pr" >&2
		read -p "  $question"$' \e[1m?\e[0m ' rep
		rep=${rep:-$def}
		case "${rep,,}" in
		  y|yes|oui|'sí'|ja|si|'да')
			return 0 ;;
		  n|no|non|nein|'нет')
			return 1 ;;
		  *) echo "  please answer \"yes\" or \"no\"" >&2 ;;
		esac
	done
}

bl_radiolist() {
	local name
	((BL_INTERACTIVE_isprogram)) && name="$BL_INTERACTIVE_NAME ${FUNCNAME:3}" || name="$FUNCNAME"
	local usage="Usage: $name [OPTIONS] [--] ITEMS..."
	local output def pr nperline=3 n i ret=0 rv=0 inarray
	local helpmsg="
Helper for a single choice in a list (like radiobutton)
Display (stderr) numbered list of item and loop asking for a number in this list
Then echo (stdout) selected number (1-n).

Options:
  -i, --output-index         Output index (= number - 1) instead of number
  -v, --output-value         Output value instead of number
  -d, --default NUMBER       Set given number as a default answer, negative count from the end
  -I, --default-index INDEX  Set given index as a default answer, negative count from the end
  -D, --default-value STRING Set first occurence of value as a default answer
  -t, --text TEXT            Text/Question to display before the list
  -n, --num-per-line NUMBER  Number of items per line (default: $nperline)
"
	for ((;$#;)) ; do
		case "$1" in
			-i|--output-index) output=index ;;
			-v|--output-value) output=value ;;
			-d|--default) shift ; def="$1" ;;
			-I|--default-index) shift ; def=$(($1<0?$1:$1+1)) ;;
			-D|--default-value) shift ; def_value="$1" ;;
			-p|--preamble|-t|--text) shift ; pr="$1" ;;
			-n|--num*) shift ; nperline="$1" ;;
			-h|--help) printf "%s\n%s\n" "$usage" "$helpmsg" ; return ;;
			-V|--version) echo "$FUNCNAME $BL_INTERACTIVE_VERSION" ; return ;;
			--) shift ; break ;;
			-*) printf "%s: Error: unrecognized option '%s'\nTry '%s --help' for more information.\n" "$FUNCNAME" "$1" "$name" >&2 ; return 2 ;;
			*) break ;;
		esac
		shift
	done
	n=$#
	((n)) || { printf "%s: Error: need items\nTry '%s --help' for more information.\n" "$FUNCNAME" "$name" >&2 ; return 1 ; }

	if [[ -v def_value ]] ; then
		# Search index of given default value
		if def="$(_bl_interactive_indexof "$def_value" "$@")" ; then
			# if found, translate index to number
			((++def))
		fi
	fi

	# Save ITEMS in inarray if output == "value"
	if [[ "$output" == "value" ]] ; then inarray=("$@") ; fi

	# Manage negative number
	((def>=0)) || ((def=n+1+def))

	if [[ "$BL_INTERACTIVE_FRONTEND" =~ ^(whiptail|dialog)$ ]] ; then
		local rv entry_options=()
		for ((i=1;i<=n;i++)) ; do
			entry_options+=("$i" "$1")
			((i==def)) && entry_options+=("ON") || entry_options+=("OFF")
			shift
		done
		while (( (!rv) && (ret<1 || ret>n) )) ; do
			ret=$($BL_INTERACTIVE_FRONTEND --notags --nocancel --radiolist " $pr" 0 0 $n "${entry_options[@]}" {fd}>&1 1>&2 2>&${fd})
			rv=$?
		done
	else
		printf "%s" "$pr" >&2
		for ((i=0;i<n;)) ; do
			if ((i%nperline)) ; then
				printf "\t\t" >&2
			else
				printf "\n\t" >&2
			fi
			printf "%d) %s" "$((++i))" "$1" >&2
			shift
		done
		echo >&2

		local question=$'\e[1m'"Reply"$'\e[0m \e[2m'"(1-$n)"$'\e[0m'
		((!def)) || question+=" [$def]"
		# the '!' in following test allow to re-ask the question if ret is not a number
		while ! ((ret>0 && ret<=n)) ; do
			read -p "  $question"$' \e[1m?\e[0m ' ret
			ret=${ret:-$def}
		done
	fi

	case "$output" in
		index) echo $((ret-1)) ;;
		value) echo "${inarray[$((ret-1))]}" ;;
		*) echo "$ret" ;;
	esac
	return $rv
}


### Help Messages (and set -e if program) ###

if [[ "$BASH_SOURCE" == "$0" ]] ; then
	# run as a program
	set -e
	declare -r BL_INTERACTIVE_isprogram=1

	BL_INTERACTIVE_usage="Usage: $BASH_SOURCE [OPTIONS]... ACTION [ACTION_ARGUMENTS]..."
	BL_INTERACTIVE_shelpmsg="
Actions:
$(for f in "${BL_INTERACTIVE_FUNCTIONS[@]}" ; do printf "   %-19s%s\n" "${f:3}" "$($f --help | sed -n '/^$/{n;p;q}')" ; done)

$BL_INTERACTIVE_NAME is also bash library, see:
$ source $BASH_SOURCE --help"
else
	# run as a library (source $0)

	BL_INTERACTIVE_usage="Usage: source $BASH_SOURCE [OPTIONS]..."

	BL_INTERACTIVE_shelpmsg="
      --bash-completion    set completion for $BASH_SOURCE program and return (without loading anything else)

Functions:
$(for f in "${BL_INTERACTIVE_FUNCTIONS[@]}" ; do printf "   %-19s%s\n" "$f" "$($f --help | sed -n '/^$/{n;p;q}')" ; done)

Reminder: when used as a library, all functions calls share the same environment variables, i.e. the same global options."
fi

BL_INTERACTIVE_chelpmsg="
Options:
  -f, --frontend PROGRAM   select a frontend program {NONE,whiptail,dialog} (cf. env BL_INTERACTIVE_FRONTEND)
  -h, --help               show this help and exit/return
  -V, --version            show version and exit/return"


### Init ###

# Parse Options
_bl_interactive_parseoptions "$@"

# Do nothing else if sourced
[[ "$BASH_SOURCE" == "$0" ]] || return 0

### Run ###
shift $BL_INTERACTIVE_NOPTIONS
if function=$(grep -o "\<bl_$1\>" <<< "${BL_INTERACTIVE_FUNCTIONS[@]}") ; then
	shift
	$function "$@"
	exit $?
else
	printf "%s: unrecognized action '%s'\n\nTry '%s --help' for more information.\n" "$BL_INTERACTIVE_NAME" "$1" "$BASH_SOURCE" >&2
	exit 2
fi

